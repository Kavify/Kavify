File: app\src\test\java\ru\feryafox\kavify\ExampleUnitTest.kt
--------------------------------------------------------------------------------
package ru.feryafox.kavify

import org.junit.Test

import org.junit.Assert.*

/**
 * Example local unit test, which will execute on the development machine (host).
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
class ExampleUnitTest {
    @Test
    fun addition_isCorrect() {
        assertEquals(4, 2 + 2)
    }
}
--------------------------------------------------------------------------------

File: app\src\main\java\ru\feryafox\kavify\MainActivity.kt
--------------------------------------------------------------------------------
package ru.feryafox.kavify

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.navigation.compose.rememberNavController
import dagger.hilt.android.AndroidEntryPoint
import ru.feryafox.kavify.ui.AppNavGraph
import ru.feryafox.kavify.ui.Routes
import ru.feryafox.kavify.ui.theme.KavifyTheme

@AndroidEntryPoint
class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            KavifyTheme {
                val navController = rememberNavController()
                AppNavGraph(Routes.LOGIN.path, navController)
            }
        }
    }
}

--------------------------------------------------------------------------------

File: app\src\main\java\ru\feryafox\kavify\KavifyApp.kt
--------------------------------------------------------------------------------
package ru.feryafox.kavify

import android.app.Application
import dagger.hilt.android.HiltAndroidApp

@HiltAndroidApp
class KavifyApp : Application()

--------------------------------------------------------------------------------

File: app\src\androidTest\java\ru\feryafox\kavify\ExampleInstrumentedTest.kt
--------------------------------------------------------------------------------
package ru.feryafox.kavify

import androidx.test.platform.app.InstrumentationRegistry
import androidx.test.ext.junit.runners.AndroidJUnit4

import org.junit.Test
import org.junit.runner.RunWith

import org.junit.Assert.*

/**
 * Instrumented test, which will execute on an Android device.
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
@RunWith(AndroidJUnit4::class)
class ExampleInstrumentedTest {
    @Test
    fun useAppContext() {
        // Context of the app under test.
        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
        assertEquals("ru.feryafox.kavify", appContext.packageName)
    }
}
--------------------------------------------------------------------------------

File: app\src\main\java\ru\feryafox\kavify\viewmodels\LoginViewModel.kt
--------------------------------------------------------------------------------
package ru.feryafox.kavify.viewmodels

import android.content.SharedPreferences
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.setValue
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.launch
import ru.feryafox.kavify.data.repositories.KavitaRepository
import ru.feryafox.kavify.data.repositories.PreferencesManager
import javax.inject.Inject

@HiltViewModel
class LoginViewModel @Inject constructor(
    private val repository: KavitaRepository,
    private val preferences: PreferencesManager
) : ViewModel() {
    var errorMessage by mutableStateOf<String?>(null)
    var isLoading by mutableStateOf(false)

    fun login(server: String, username: String, password: String, onSuccess: () -> Unit) {
        viewModelScope.launch {
            isLoading = true
            errorMessage = null
            try {
                repository.setBaseUrl(server)
                repository.login(username, password)
//                preferences.saveAuthCredentials()
                println(repository.getClient().auth().credentials)
                onSuccess()
            } catch (e: Exception) {
                errorMessage = "Ошибка входа: ${e.message}"
            } finally {
                isLoading = false
            }
        }
    }

    fun loginWithApiKey(server: String, apiKey: String, onSuccess: () -> Unit) {
        onSuccess()
    }
}
--------------------------------------------------------------------------------

File: app\src\main\java\ru\feryafox\kavify\ui\AppNavGraph.kt
--------------------------------------------------------------------------------
package ru.feryafox.kavify.ui

import androidx.compose.runtime.Composable
import androidx.compose.ui.graphics.BlendMode.Companion.Screen
import androidx.navigation.NavHostController
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import ru.feryafox.kavify.data.models.Book
import ru.feryafox.kavify.ui.screens.BookListScreen
import ru.feryafox.kavify.ui.screens.LoginScreen

@Composable
fun AppNavGraph(startDestination: String, navController: NavHostController) {
    NavHost(navController = navController, startDestination = startDestination) {
        composable(Routes.LOGIN.path) {
            LoginScreen(onLoginSuccess = {
                navController.navigate(Routes.SEARCH.path) {
                    popUpTo(Routes.LOGIN.path) { inclusive = true }
                }
            })
        }
        composable(Routes.SEARCH.path) {

            val books = listOf(
                Book(1, "Дюна", "Фрэнк Герберт"),
                Book(2, "1984", "Джордж Оруэлл"),
                Book(3, "Бойцовский клуб", "Чак Паланик")
            )

            BookListScreen(books = books, onBookClick = {
                println("Foo")
            })
        }
    }
}

enum class Routes(val path: String) {
    LOGIN("route"),
    SEARCH("search")
}

--------------------------------------------------------------------------------

File: app\src\main\java\ru\feryafox\kavify\di\AppModule.kt
--------------------------------------------------------------------------------
package ru.feryafox.kavify.di

import android.content.Context
import android.content.SharedPreferences
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.android.qualifiers.ApplicationContext
import dagger.hilt.components.SingletonComponent
import ru.feryafox.kavify.data.repositories.KavitaRepository
import ru.feryafox.kavita4j.Kavita4J
import ru.feryafox.kavita4j.components.Kavita4JAuth.Kavita4JAuthCredentials
import javax.inject.Singleton

@Module
@InstallIn(SingletonComponent::class)
class AppModule {
    @Provides
    @Singleton
    fun provideSharedPrefs(
        @ApplicationContext context: Context
    ): SharedPreferences {
        return context.getSharedPreferences("auth", Context.MODE_PRIVATE)
    }

    @Provides
    @Singleton
    fun provideKavitaClient(
        prefs: SharedPreferences
    ): Kavita4J {
        val server = prefs.getString("base_url", "") ?: ""

        val kavita4JCredential = Kavita4JAuthCredentials(
            prefs.getString("username", null),
            prefs.getString("password", null),
            prefs.getString("api_key", null),
            prefs.getString("access_token", null),
            prefs.getString("refresh_token", null)
        )

        val kavita4J = Kavita4J(server)
        kavita4J.auth().loadCredentials(kavita4JCredential)

        return kavita4J
    }

    @Provides
    @Singleton
    fun provideKavitaRepository(
        client: Kavita4J
    ): KavitaRepository = KavitaRepository(client)
}
--------------------------------------------------------------------------------

File: app\src\main\java\ru\feryafox\kavify\ui\theme\Type.kt
--------------------------------------------------------------------------------
package ru.feryafox.kavify.ui.theme

import androidx.compose.material3.Typography
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.sp

// Set of Material typography styles to start with
val Typography = Typography(
    bodyLarge = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 16.sp,
        lineHeight = 24.sp,
        letterSpacing = 0.5.sp
    )
    /* Other default text styles to override
    titleLarge = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 22.sp,
        lineHeight = 28.sp,
        letterSpacing = 0.sp
    ),
    labelSmall = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Medium,
        fontSize = 11.sp,
        lineHeight = 16.sp,
        letterSpacing = 0.5.sp
    )
    */
)
--------------------------------------------------------------------------------

File: app\src\main\java\ru\feryafox\kavify\ui\theme\Theme.kt
--------------------------------------------------------------------------------
package ru.feryafox.kavify.ui.theme
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.graphics.Color

private val LightColors = lightColorScheme(
    primary = Color(0xFF6750A4),
    secondary = Color(0xFF625B71),
    background = Color(0xFFFFFBFE),
    surface = Color(0xFFFFFBFE),
    onPrimary = Color.White,
    onSecondary = Color.White,
    onBackground = Color(0xFF1C1B1F),
    onSurface = Color(0xFF1C1B1F),
)

private val DarkColors = darkColorScheme(
    primary = Color(0xFFD0BCFF),
    secondary = Color(0xFFCCC2DC),
    background = Color(0xFF1C1B1F),
    surface = Color(0xFF1C1B1F),
    onPrimary = Color.Black,
    onSecondary = Color.Black,
    onBackground = Color(0xFFE6E1E5),
    onSurface = Color(0xFFE6E1E5),
)

@Composable
fun KavifyTheme(
    useDarkTheme: Boolean = isSystemInDarkTheme(),
    content: @Composable () -> Unit
) {
    val colors = if (useDarkTheme) DarkColors else LightColors

    MaterialTheme(
        colorScheme = colors,
        typography = Typography(),
        content = content
    )
}

--------------------------------------------------------------------------------

File: app\src\main\java\ru\feryafox\kavify\ui\theme\Color.kt
--------------------------------------------------------------------------------
package ru.feryafox.kavify.ui.theme

import androidx.compose.ui.graphics.Color

val Purple80 = Color(0xFFD0BCFF)
val PurpleGrey80 = Color(0xFFCCC2DC)
val Pink80 = Color(0xFFEFB8C8)

val Purple40 = Color(0xFF6650a4)
val PurpleGrey40 = Color(0xFF625b71)
val Pink40 = Color(0xFF7D5260)
--------------------------------------------------------------------------------

File: app\src\main\java\ru\feryafox\kavify\ui\screens\LoginScreen.kt
--------------------------------------------------------------------------------
package ru.feryafox.kavify.ui.screens

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.input.*
import androidx.compose.ui.unit.dp
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.lifecycle.ViewModel
import ru.feryafox.kavify.viewmodels.LoginViewModel

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun LoginScreen(
    viewModel: LoginViewModel = hiltViewModel(),
    onLoginSuccess: () -> Unit
) {
    var serverAddress by remember { mutableStateOf("") }
    var login by remember { mutableStateOf("") }
    var password by remember { mutableStateOf("") }
    var apiKey by remember { mutableStateOf("") }
    var useApiKey by remember { mutableStateOf(false) }

    val context = LocalContext.current

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("Вход в Kavita") },
                colors = TopAppBarDefaults.topAppBarColors()
            )
        }
    ) { innerPadding ->
        Column(
            modifier = Modifier
                .padding(innerPadding)
                .padding(16.dp)
                .fillMaxSize(),
            verticalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            OutlinedTextField(
                value = serverAddress,
                onValueChange = { serverAddress = it },
                label = { Text("Адрес сервера") },
                placeholder = { Text("https://kavita.example.com") },
                singleLine = true,
                modifier = Modifier.fillMaxWidth()
            )

            Row(
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.Start
            ) {
                Checkbox(
                    checked = useApiKey,
                    onCheckedChange = { useApiKey = it }
                )
                Text("Использовать API ключ вместо логина/пароля")
            }

            if (useApiKey) {
                OutlinedTextField(
                    value = apiKey,
                    onValueChange = { apiKey = it },
                    label = { Text("API Key") },
                    singleLine = true,
                    modifier = Modifier.fillMaxWidth()
                )
            } else {
                OutlinedTextField(
                    value = login,
                    onValueChange = { login = it },
                    label = { Text("Логин") },
                    singleLine = true,
                    modifier = Modifier.fillMaxWidth()
                )
                OutlinedTextField(
                    value = password,
                    onValueChange = { password = it },
                    label = { Text("Пароль") },
                    singleLine = true,
                    visualTransformation = PasswordVisualTransformation(),
                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Password),
                    modifier = Modifier.fillMaxWidth()
                )
            }

            Spacer(modifier = Modifier.height(16.dp))

            Button(
                onClick = {
                    if (useApiKey) {
                        viewModel.loginWithApiKey(serverAddress, apiKey, onLoginSuccess)
                    } else {
                        viewModel.login(serverAddress, login, password, onLoginSuccess)
                    }
                },
                enabled = !viewModel.isLoading
            ) {
                if (viewModel.isLoading) {
                    CircularProgressIndicator(modifier = Modifier.size(20.dp))
                } else {
                    Text("Войти")
                }
            }
        }
    }
}

--------------------------------------------------------------------------------

File: app\src\main\java\ru\feryafox\kavify\ui\screens\BookListScreen.kt
--------------------------------------------------------------------------------
package ru.feryafox.kavify.ui.screens

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.material3.TopAppBarDefaults
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import ru.feryafox.kavify.data.models.Book
import ru.feryafox.kavify.ui.components.BookCard

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun BookListScreen(
    books: List<Book>,
    onBookClick: (Book) -> Unit
) {
    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("Моя библиотека") },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = MaterialTheme.colorScheme.primary,
                    titleContentColor = MaterialTheme.colorScheme.onPrimary
                )
            )
        }
    ) { innerPadding ->
        LazyColumn(
            contentPadding = innerPadding,
            modifier = Modifier
                .fillMaxSize()
                .background(MaterialTheme.colorScheme.background)
        ) {
            items(books) { book ->
                BookCard(book = book, onClick = { onBookClick(book) })
            }
        }
    }
}

--------------------------------------------------------------------------------

File: app\src\main\java\ru\feryafox\kavify\ui\components\BookCard.kt
--------------------------------------------------------------------------------
package ru.feryafox.kavify.ui.components

import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import ru.feryafox.kavify.data.models.Book

@Composable
fun BookCard(book: Book, onClick: () -> Unit) {
    Card(
        modifier = Modifier
            .padding(12.dp)
            .fillMaxWidth()
            .clickable { onClick() },
        shape = RoundedCornerShape(16.dp),
        elevation = CardDefaults.cardElevation(6.dp),
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.surface
        )
    ) {
        Column(modifier = Modifier.padding(16.dp)) {
            Text(
                text = book.title,
                style = MaterialTheme.typography.titleMedium,
                color = MaterialTheme.colorScheme.onSurface
            )
            Spacer(modifier = Modifier.height(4.dp))
            Text(
                text = "Автор: ${book.author}",
                style = MaterialTheme.typography.bodyMedium,
                color = MaterialTheme.colorScheme.onSurfaceVariant
            )
        }
    }
}

--------------------------------------------------------------------------------

File: app\src\main\java\ru\feryafox\kavify\data\repositories\PreferencesManager.kt
--------------------------------------------------------------------------------
package ru.feryafox.kavify.data.repositories

import android.content.SharedPreferences
import ru.feryafox.kavita4j.components.Kavita4JAuth.Kavita4JAuthCredentials
import javax.inject.Inject
import javax.inject.Singleton

@Singleton
class PreferencesManager @Inject constructor(
    private val prefs: SharedPreferences
){
    fun saveAuthCredentials(
        kavita4JAuthCredentials: Kavita4JAuthCredentials
    ) = prefs.edit()
        .putString("username", kavita4JAuthCredentials.username)
        .putString("password", kavita4JAuthCredentials.password)
        .putString("api_key", kavita4JAuthCredentials.apiKey)
        .putString("access_token", kavita4JAuthCredentials.accessToken)
        .putString("refresh_token", kavita4JAuthCredentials.refreshToken)
        .apply()

    fun saveBaseUrl(baseUrl: String) = prefs.edit()
        .putString("base_url", baseUrl)
        .apply()
}
--------------------------------------------------------------------------------

File: app\src\main\java\ru\feryafox\kavify\data\repositories\KavitaRepository.kt
--------------------------------------------------------------------------------
package ru.feryafox.kavify.data.repositories

import ru.feryafox.kavita4j.Kavita4J

class KavitaRepository(
    private val client: Kavita4J
){
    fun setBaseUrl(baseUrl: String) = client.setBaseUrl(baseUrl)

    fun login(username: String, password: String) = client.auth().login(username, password)

    fun login(apiToken: String) = client.auth().login(apiToken)

    fun getClient() = client
}
--------------------------------------------------------------------------------

File: app\src\main\java\ru\feryafox\kavify\data\models\Book.kt
--------------------------------------------------------------------------------
package ru.feryafox.kavify.data.models

data class Book(
    val id: Int,
    val title: String,
    val author: String
)

--------------------------------------------------------------------------------

